---
description: Framework for systematic collection of insights from chat interactions, code execution, and pattern analysis.
globs: **/*
alwaysApply: true
---



Make sure to capture important insights while working with the user and writing the code. Those insights should be
captured as new rules and persisted for future use.

Consider updating rules when you observe:
- Code structures not addressed by current rules
- Similar implementation approaches appearing across multiple files
- Recurring error patterns that could be prevented proactively
- Consistent adoption of new development tools or libraries
- Evolving best practices within the project codebase

### Refining Existing Rules

Update current rules when:
- Superior implementation examples appear in the codebase
- You discover additional edge cases requiring consideration
- Changes have been made to interconnected rules
- Technical implementation details have evolved

Effective rules should:
- Provide specific, actionable guidance
- Include real-world examples from the codebase
- Maintain current and accurate references
- Support consistent pattern enforcement

Consider deleting existing rules when:
- Clearly identify deprecated patterns
- Eliminate rules that no longer apply
- Update cross-references to retired rules
- Document migration strategies for legacy approaches

Reference @devplan_rules for standardized rule formatting and organization.
