const { execSync } = require("child_process");
const fs = require("fs/promises");
const path = require("path");

const appsDir = path.resolve(process.cwd(), "apps");
const distDir = path.resolve(process.cwd(), "dist");

async function cleanDist() {
  await fs.rm(distDir, { recursive: true, force: true });
  await fs.mkdir(distDir, { recursive: true });
}

async function getAppDirs() {
  const entries = await fs.readdir(appsDir, { withFileTypes: true });
  return entries.filter((e) => e.isDirectory()).map((e) => path.join(appsDir, e.name));
}

async function readMetaType(dir) {
  const pkgJsonPath = path.join(dir, "package.json");
  const pyProjectPath = path.join(dir, "pyproject.toml");

  if (await exists(pkgJsonPath)) {
    const pkgJson = JSON.parse(await fs.readFile(pkgJsonPath, "utf8"));
    return pkgJson.meta?.type || "node";
  }

  if (await exists(pyProjectPath)) {
    const pyProject = await fs.readFile(pyProjectPath, "utf8");
    return pyProject.includes("[tool.poetry]") ? "python" : "unknown";
  }

  return "unknown";
}

async function exists(file) {
  try {
    await fs.access(file);
    return true;
  } catch {
    return false;
  }
}

async function bundleNodeApp(dir, out) {
  console.log(`📦 Bundling Node app: ${dir}`);
  execSync(`tsup src/main.tsx --format esm,cjs --dts --outDir ${out}`, {
    cwd: dir,
    stdio: "inherit",
  });
  await createStartScript(out, "node main.js");
}

async function bundleReactApp(dir, out) {
  console.log(`🎨 Building React app: ${dir}`);
  execSync(`vite build`, {
    cwd: dir,
    stdio: "inherit",
  });
  await fs.mkdir(out, { recursive: true });
  await fs.cp(path.join(dir, "dist"), out, { recursive: true });
  await createStartScript(out, "serve .");
}

async function bundlePythonApp(dir, out) {
  console.log(`🐍 Bundling Python app: ${dir}`);
  execSync(`poetry install --no-root`, {
    cwd: dir,
    stdio: "inherit",
  });
  const venvPath = path.join(dir, ".venv");
  const outVenv = path.join(out, "venv");
  await fs.cp(venvPath, outVenv, { recursive: true });
  await fs.cp(dir, out, {
    recursive: true,
    filter: (src) => !src.includes("/.venv") && !src.includes("/dist"),
  });
  await createStartScript(out, "source ./venv/bin/activate && python particle0/main.py");
}

async function createStartScript(out, command) {
  const scriptPath = path.join(out, "start.sh");
  await fs.writeFile(scriptPath, `#!/bin/bash\n${command}\n`);
  await fs.chmod(scriptPath, 0o755);
}

async function bundle() {
  await cleanDist();
  const appDirs = await getAppDirs();

  for (const dir of appDirs) {
    const appName = path.basename(dir);
    const out = path.join(distDir, appName);
    const type = await readMetaType(dir);

    if (type === "node") {
      await bundleNodeApp(dir, out);
    } else if (type === "react") {
      await bundleReactApp(dir, out);
    } else if (type === "python") {
      await bundlePythonApp(dir, out);
    } else {
      console.warn(`⚠️ Unknown meta.type for app: ${appName}, skipping.`);
    }
  }
}

bundle().catch((err) => {
  console.error("❌ Bundle failed:", err);
  process.exit(1);
});
